%% generateGPdata.m
% *Summary:* Generates the data for the GP models
% 
% Detailed Explanation:
%   Data is generated by a prior "cold-run" simulation with just the
%   Visual Motion Observer. The data is then stored in .mat files to be
%   loaded in other scripts.
%
% -----------
%
% Editor:
%   OMAINSKA Marco - Doctoral Student, Cybernetics
%       <marcoomainska@g.ecc.u-tokyo.ac.jp>
% Property of: Fujita-Yamauchi Lab, The University of Tokyo, 2023
% Website: https://www.scl.ipc.i.u-tokyo.ac.jp

% ------------- BEGIN CODE -------------
% set(groot,'defaultAxesTickLabelInterpreter','latex');
rng(0);

%% common settings

% VMO Simulation Settings

% observer gain
Ke = 30*eye(6);

% focal length
lambda = 20;

% feature points
fp = [   0,  0,  0.5;
       0.5,  0,    0;
       0,    0, -0.5;
      -0.5,  0,    0];

% initial conditions
gco_init = mergepose(eye(3),[0 1 0]);
gwc_init = mergepose(eye(3),[0 -5 0]);
pwo_init = [-1 1 0];

% trajectory settings
center = [0 0 0];
scale = 1;
% trajectory = 'vdp';
% v = 1;
% epsilon = 0.5;
trajectory = 'quartic';
v = 1.5;
epsilon = 0.25;


% GP related settings

% datatype = 'VF';
datatype = 'TJ';

% datapoints M = Mx*My
% Mx = 10;
% My = 10;
% M = Mx*My;
M = 6;

% noise standard deviation
sn0 = 1e-1;
sn = sn0*ones(6,1);

% data range
xbnd = [-2.2+center(1) 2.2+center(1)]./scale;
ybnd = [-2.2+center(2) 2.2+center(2)]./scale;

% plot range
xbndplot = [-2.5+center(1) 2.5+center(1)]./scale;
ybndplot = [-2+center(2) 2+center(2)]./scale;

% gp bounds
ub = [1.5*ones(6,1) 2*ones(6,1)];
ub(2,2) = 3;
ub(5,2) = 3;
lb = 1e-5*ones(6,2);


%% Simulate VF

% % simulate
tend = 20;
simout = sim('generateData');
[~,pwo] = splitpose(simout.gwo.signals.values);
dt = simout.SimulationMetadata.ModelInfo.SolverInfo.FixedStepSize;

if strcmp(datatype,'TJ')
    % TJ: generate data
    ghomdata = simout.gwo.signals.values;
    gvecdata = check(simout.gwo.signals.values);
    Vbdata = simout.Vbwo.signals.values;
    % split datapoints wide afar
%     idx = ceil(linspace(7/dt,13.1/dt,M));
    idx = ceil(linspace(7/dt,12/dt,M));
else
    % VF: generate data
    [Vbmdata, ~, Zang, Xmdata, Ymdata] = generateTRdata(xbnd,ybnd,Mx,My,epsilon,v,center,scale);
    p = [reshape(Xmdata,M,1) reshape(Ymdata,M,1) zeros(M,1)];
    zang = reshape(Zang,M,1);
    gvecdata = [p [0 0 1].*zang];
    ghomdata = zeros(4,4,M);
    for i = 1:M
        ghomdata(:,:,i) = mergepose(axang2rotm([0 0 1 zang(i)]),p(i,:));
    end
    Vbdata = reshape(Vbmdata,M,6);
    idx = 1:M;
end


%% calc lipschitz
dist = @(g1,g2) sqrt(0.5*norm(g1(1:3,4) - g2(1:3,4),2)^2 + 0.5*norm(g1(1:3,1:3) - g2(1:3,1:3),"fro")^2);
lip_f = zeros(6,1);
for i = (2/dt):(tend/dt)
    dx = dist(ghomdata(:,:,i+1),ghomdata(:,:,i));
    for q = 1:6
        dy = abs(Vbdata(i+1,q) - Vbdata(i,q));
        lip_f(q) = max(lip_f(q), dy/dx);
    end
end
disp(['Lipschitz constant L_fi = ' mat2str(lip_f,2)])
disp(['Lipschitz constant L_f  â‰¤ ' num2str(norm(lip_f,2),'%.2f')])


%% Squared Exponential Kernel
kernel = @SE;

% generate GP models
[X,Y,hyp,~] = learnRMGP(gvecdata,Vbdata,M,kernel,sn0,idx,'lowerBound',lb,'upperBound',ub,'fixedNoise',false,'verbose',false);

% plot
fig = figure('Name','Velocity Field','NumberTitle','off',...
    'Units','normalized','Position',[.1 .2 .4 .5]);
tiledlayout(1,1,'TileSpacing','Compact','Padding','Compact');
ax = nexttile;
plotVF(ax,X,epsilon,v,center,scale,xbndplot,ybndplot,pwo)

% save GP data
meta = struct('type',trajectory,'epsilon',epsilon,'v',v,'center',center,'scale',scale,'fig',fig);
fname = ['data/GP/' datatype '_' trajectory '_eps' erase(sprintf('%g',epsilon),'.') 'v' erase(sprintf('%g',v),'.') '_' func2str(kernel) '_M' sprintf('%g',M)];
% save(fname,'X','Y','hyp','sn','kernel','meta')


%% SE3-Kernel (Axis-Angle)
kernel = @SE3Axang;

% generate GP models
[X,Y,hyp,~] = learnRMGP(gvecdata,Vbdata,M,kernel,sn0,idx,'lowerBound',lb,'upperBound',ub,'fixedNoise',false,'verbose',false);

% plot
fig = figure('Name','Velocity Field','NumberTitle','off',...
    'Units','normalized','Position',[.1 .2 .4 .5]);
tiledlayout(1,1,'TileSpacing','Compact','Padding','Compact');
ax = nexttile;
plotVF(ax,X,epsilon,v,center,scale,xbndplot,ybndplot,pwo)

% save GP data
meta = struct('type',trajectory,'epsilon',epsilon,'v',v,'center',center,'scale',scale,'fig',fig);
fname = ['data/GP/' datatype '_' trajectory '_eps' erase(sprintf('%g',epsilon),'.') 'v' erase(sprintf('%g',v),'.') '_' func2str(kernel) '_M' sprintf('%g',M)];
% save(fname,'X','Y','hyp','sn','kernel','meta')


%% SE3-Kernel (Homogeneous)
kernel = @SE3Hom;

% generate GP models
[X,Y,hyp,~] = learnRMGP(ghomdata,Vbdata,M,kernel,sn0,idx,'lowerBound',lb,'upperBound',ub,'fixedNoise',false,'verbose',false);

% plot
fig = figure('Name','Velocity Field','NumberTitle','off',...
    'Units','normalized','Position',[.1 .2 .4 .5]);
tiledlayout(1,1,'TileSpacing','Compact','Padding','Compact');
ax = nexttile;
plotVF(ax,check(X),epsilon,v,center,scale,xbndplot,ybndplot,pwo)

% save GP data
meta = struct('type',trajectory,'epsilon',epsilon,'v',v,'center',center,'scale',scale,'fig',fig);
fname = ['data/GP/' datatype '_' trajectory '_eps' erase(sprintf('%g',epsilon),'.') 'v' erase(sprintf('%g',v),'.') '_' func2str(kernel) '_M' sprintf('%g',M)];
% save(fname,'X','Y','hyp','sn','kernel','meta')


%% Local functions

function [Vbm, Znorm, Zang, Xm, Ym] = generateTRdata(xbnd,ybnd,Mx,My,epsilon,v,center,scale)
    % calc meshgrid
    xm = linspace(xbnd(1),xbnd(2),Mx);
    ym = linspace(ybnd(2),ybnd(1),My);
    
    
    % eval VF on grid
    Vbm = zeros(My,Mx,6);
    for i = 1:numel(ym)
        for j = 1:numel(xm)
%             Vbm(i,j,:) = vanderpol([xm(j) ym(i) 0],v,epsilon,center,scale);
            Vbm(i,j,:) = quartic([xm(j) ym(i) 0],v,epsilon,center,scale);
        end
    end
    Znorm = sqrt(Vbm(:,:,1).^2 + Vbm(:,:,2).^2);
    Zang = wrapToPi(atan2(Vbm(:,:,2),Vbm(:,:,1)) - pi/2);
    [Xm,Ym] = meshgrid(xm,ym);
end

function plotVF(ax,X,epsilon,v,center,scale,xbnd,ybnd,pwo)
    arrowcolor = [65/255 114/255 160/255];
%     arrowcolor = ones(1,3)*0;
    trajcolor = '#f4a261';
%     trajcolor  = ones(1,3)*0.6;
    datacolor = '#e63946';
%     datacolor  = ones(1,3)*0.25;
    mapcolor = [1 1 1; ...
                 241/255 246/255 249/255; ...
                 221/255 232/255 238/255; ...
                  93/255 143/255 180/255];
%     mapcolor   = [ones(1,3)*1; ...
%                   ones(1,3)*0.975; ...
%                   ones(1,3)*0.95; ...
%                   ones(1,3)*0.85];

    % calculate quiver
    [Vbm, Znorm, ~, Xm, Ym] = generateTRdata(xbnd,ybnd,20,20,epsilon,v,center,scale);
    xm = Xm(1,:);
    ym = Ym(:,1)';

    % plot
    hold(ax,'on');
    contourf(ax,xm,ym,Znorm,[0 0.9 1.7 2.3],'LineStyle','none');
    colormap(ax,mapcolor);
    quiver(ax,xm,ym,Vbm(:,:,1),Vbm(:,:,2),1.2,'LineWidth',3,'Color',arrowcolor);
    plot3(ax,pwo(:,1),pwo(:,2),pwo(:,3),'Color',trajcolor,'LineWidth',10);
    xlabel(ax,'x [m]', 'interpreter', 'latex')
    ylabel(ax,'y [m]', 'interpreter', 'latex')
    zlabel(ax,'z [m]', 'interpreter', 'latex')
    axis(ax,'equal','tight')
    xlim(ax,xbnd);
    ylim(ax,ybnd);
    plot3(ax,X(:,1),X(:,2),X(:,3),'+','Color',datacolor,'LineWidth',5,'MarkerSize',30);
    grid(ax,'off');
    ax.FontSize = 35;
    view(ax,-58,43);
end
